#!/bin/bash

set -eu -o pipefail
# set -x
export LANG=C LC_ALL=C
cd $(dirname $0)

#DOITPROG=echo

# set DOITPROG to echo to test this script
# Don't use :- since 4.3BSD and earlier shells don't like it.
doit=${DOITPROG-}
if test -z "$doit"; then
  doit_exec=exec
else
  doit_exec=$doit
fi

E_RUNERR=65

# Check if md5sum and bc are installed. 
if ! which bc &> /dev/null; then
   echo bc is not installed.  
   echo "Can\'t run . . . "
   exit $E_RUNERR
fi

### Constants
# April 11, 2019
DOCKER_IMAGE="docker:18.09-dind"
# March 14, 2019
BUILDKIT_IMAGE="moby/buildkit:v0.4.0"
# Dec 29, 2018
IMG_IMAGE="r.j3ss.co/img:v0.5.6"
# Buildah does not have tagged images; git: containerbuilding/buildah@11e6007adff0f84053761b7df6855cc01d5cdd96 (Jan 5, 2019)
BUILDAH_IMAGE="containerbuilding/buildah@sha256:bf4af5702e7cab4d0ac1054f686946f1cddbc90a6a2a34dd64fe8f40d0145daf"
# Feb 8, 2019
KANIKO_IMAGE="gcr.io/kaniko-project/executor:v0.9.0"
# Jan 18, 2019
REGISTRY_IMAGE="registry:2.7.1"

### Common
function INFO(){
    echo -e "\e[104m\e[97m[INFO]\e[49m\e[39m $@"
}
function bb::volume_name(){
    echo "buildbench-$1"
}
function bb::container_name(){
    echo "buildbench-$1"
}
function bb::dummy_file_name(){
    echo "buildbench-dummy"
}
function bb::test(){
    local builder="$1"
    local dir="$2"
    local csv="$3"
    local n="$4"
    INFO "Initializing ${builder}"
    ${builder}::prune || true
    ${builder}::init
    for i in $(seq 1 ${n});do
        INFO "${i} of ${n}: ${builder}: preparing"
        rm -f ${dir}/$(bb::dummy_file_name)
        ${builder}::prepare
        local desc="${i} of ${n}: ${builder} #1 (clean env)"
        INFO "${desc}: starting"
        local begin=$(date +%s.%N)
        ${builder}::build ${dir}
        local end=$(date +%s.%N)
        local took=$(echo ${end}-${begin} | bc)
        INFO "${desc}: done, took ${took} seconds"
        echo "${builder}-1,${took},${begin},${end}" >> ${csv}
        desc="${i} of ${n}: ${builder} #2 (with dummy modification. cache can be potentially used.)"
        date > ${dir}/$(bb::dummy_file_name)
        INFO "${desc}: starting"
        local begin=$(date +%s.%N)
        ${builder}::build ${dir}
        local end=$(date +%s.%N)
        local took=$(echo ${end}-${begin} | bc)
        INFO "${desc}: done, took ${took} seconds"
        echo "${builder}-2,${took},${begin},${end}" >> ${csv}
        INFO "${i} of ${n}: ${builder}: pruning"
        rm -f ${dir}/$(bb::dummy_file_name)
        ${builder}::prune
    done
}

### Docker
function docker::init(){
    $doit docker pull ${DOCKER_IMAGE}
    INFO "Docker version"
    $doit docker run --rm ${DOCKER_IMAGE} docker --version
}
function docker::prepare(){
    $doit docker volume create $(bb::volume_name docker)
    $doit docker run --privileged --name $(bb::container_name docker) -d -v $(bb::volume_name docker):/var/lib/docker ${DOCKER_IMAGE} \
           -s overlay2
}
function docker::build(){
    local dir="$1"
    $doit docker run -v ${dir}:/workspace -w /workspace --rm --link $(bb::container_name docker):docker -e DOCKER_HOST=tcp://docker:2375 ${DOCKER_IMAGE} \
           docker build -t foo -q . > /dev/null 2>&1
}
function docker::prune(){
    $doit docker rm -f $(bb::container_name docker)
    $doit docker volume rm -f $(bb::volume_name docker)
}

### BuildKit
function buildkit::init(){
    $doit docker pull ${BUILDKIT_IMAGE}
    INFO "BuildKit version"
    $doit docker run --rm ${BUILDKIT_IMAGE} --version
}
function buildkit::prepare(){
    $doit docker volume create $(bb::volume_name buildkit)
    $doit docker run --privileged --name $(bb::container_name buildkit) -d -v $(bb::volume_name buildkit):/var/lib/buildkit -p 1234:1234 ${BUILDKIT_IMAGE} \
           --addr tcp://0.0.0.0:1234
}
function buildkit::build(){
    local dir="$1"
    $doit docker run \
           -v ${dir}:/workspace -w /workspace \
           --rm \
           --link $(bb::container_name buildkit):buildkit \
           -e BUILDKIT_HOST=tcp://buildkit:1234 \
           --entrypoint buildctl \
           ${BUILDKIT_IMAGE} \
           build --frontend=dockerfile.v0 --local context=. --local dockerfile=. > /dev/null 2>&1
}
function buildkit::prune(){
    $doit docker rm -f $(bb::container_name buildkit)
    $doit docker volume rm -f $(bb::volume_name buildkit)
}

### img
function img::init(){
    $doit docker pull ${IMG_IMAGE}
    INFO "img version"
    $doit docker run --rm ${IMG_IMAGE} version
}
function img::prepare(){
    $doit docker volume create $(bb::volume_name img)
}
function img::build(){
    local dir="$1"
    # drop stdout to avoid Travis 4MB log limit
    $doit docker run --privileged -v ${dir}:/workspace -w /workspace --rm -v $(bb::volume_name img):/home/user ${IMG_IMAGE} \
           build -backend overlayfs -t foo . > /dev/null 2>&1
}
function img::prune(){
    $doit docker volume rm -f $(bb::volume_name img)
}

### Buildah
function buildah::init(){
    $doit docker pull ${BUILDAH_IMAGE}
    INFO "Buildah version"
    $doit docker run --rm ${BUILDAH_IMAGE} buildah version
}
function buildah::prepare(){
    $doit docker volume create $(bb::volume_name buildah)
}
function buildah::build(){
    local dir="$1"
    $doit docker run --privileged -v ${dir}:/workspace -w /workspace --rm -v $(bb::volume_name buildah):/var/lib/containers/storage ${BUILDAH_IMAGE} \
           buildah --storage-driver overlay bud -t foo -q . > /dev/null 2>&1
}
function buildah::prune(){
    $doit docker volume rm -f $(bb::volume_name buildah)
}

### kaniko
function kaniko::init(){
    $doit docker pull ${KANIKO_IMAGE}
    $doit docker pull ${REGISTRY_IMAGE}
    INFO "Kaniko version is unknown"
}
function kaniko::prepare(){
    $doit docker volume create $(bb::volume_name kaniko)
    $doit docker run --name $(bb::container_name kaniko-registry) -d -p 5000:5000 ${REGISTRY_IMAGE}
}
function kaniko::build(){
    local dir="$1"
    $doit docker run -v ${dir}:/workspace \
           -v $(bb::volume_name kaniko):/cache \
           --rm \
           --link $(bb::container_name kaniko-registry):kaniko-registry \
           ${KANIKO_IMAGE} \
           --context=dir://workspace \
           --cache=true --cache-dir=/cache \
           --insecure-registry=kaniko-registry:5000 --destination=kaniko-registry:5000/foo #> /dev/null 2>&1
}
function kaniko::prune(){
    $doit docker rm -f $(bb::container_name kaniko-registry)
    $doit docker volume rm -f $(bb::volume_name kaniko)
}

### Main
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 DIR CSV N"
	echo "$0 ./examples/ex01 out.csv 5DIR CSV N"
	echo "or with"
	echo "[ONLY_DOCKER=1 | ONLY_BUILDKIT=1 | ONLY_IMG=1 | ONLY_BUILDAH=1 | ONLY_KANIKO=1] $0 ./examples/ex01 out.csv 5DIR CSV N"
    exit 1
fi
DIR=$(realpath "$1")
     D=`dirname "$relpath"`
     B=`basename "$relpath"`
     abspath="`cd \"$D\" 2>/dev/null && pwd || echo \"$D\"`/$B"
CSV="$2"
N="$3"
builders=(docker buildkit img buildah kaniko)

for builder in ${builders[@]}; do
    only=ONLY_$(echo ${builder} | tr a-z A-Z)
    if [[ ! -z ${!only-} ]]; then
        INFO "Only running ${builder}"
        bb::test ${builder} ${DIR} ${CSV} ${N}
        exit
    fi
done

for builder in ${builders[@]}; do
    disable=DISABLE_$(echo ${builder} | tr a-z A-Z)
    if [[ ! -z ${!disable-} ]]; then
        INFO "Skipping ${builder}"
    else
        bb::test ${builder} ${DIR} ${CSV} ${N}
    fi
done
