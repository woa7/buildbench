name: CI

on: [push]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        # see https://github.com/DaanDeMeyer/reproc/blob/master/.github/workflows/main.yml.
        # see https://github.community/t5/GitHub-Actions/GitHub-Actions-Matrix-options-dont-work-as-documented/td-p/29558.
        # see https://github.com/svenstaro/proxyboi/blob/master/.github/workflows/publish.yml.
      matrix:
        name: [
          ubuntu-18-DOCKER,
          ubuntu-18-BUILDKIT,
          ubuntu-18-IMG,
          ubuntu-18-BUILDAH,
          ubuntu-18-KANIKO,
          macos-DOCKER
        ]
        
        include:
          - name: ubuntu-18-BUILDKIT
            env: ONLY_BUILDKIT=1
            os: ubuntu-18.04
            runversion: "BUILDKIT"
            DOITPROG: "echo"
            version: "1"
            skiping: "0"
          
          - name: ubuntu-18-DOCKER
            env: ONLY_DOCKER=1
            os: ubuntu-18.04
            runversion: "DOCKER"
            DOITPROG: "echo"
            version: "2"
            skiping: "1"

          - name: ubuntu-18-IMG
            env: ONLY_IMG=1
            os: ubuntu-18.04
            runversion: "IMG"
            DOITPROG: "echo"
            version: "3"
            skiping: "0"            
          
          - name: ubuntu-18-BUILDAH
            env: ONLY_BUILDAH=1
            os: ubuntu-18.04
            runversion: "BUILDAH"
            DOITPROG: "echo"
            version: "4"
            skiping: "0"

          - name: ubuntu-18-KANIKO
            env: ONLY_KANIKO=1
            os: ubuntu-18.04
            runversion: "KANIKO"
            DOITPROG: "echo"
            version: "5"
            skiping: "0"

          - name: macos-DOCKER
            os: macos-latest
            runversion: "DOCKER"
            DOITPROG: "echo"
            version: "6"
            skiping: "1"
            
    steps:
      if [ "${{ matrix.skiping }}" = "0" ]; then
        - uses: actions/checkout@v1
          with: 
            submodules: recursive
        #- uses: srt32/git-actions@v0.0.3
        #  with: 
        #    args: "git submodule update --init --recursive"
        - name: Install (Linux)
          if: runner.os == 'Linux'
          run: |
            #curl -sSL https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5-Linux-x86_64.tar.gz -o cmake.tar.gz
            #sudo tar xf cmake.tar.gz --strip 1 -C /usr/local
            # LLVM 9 is not yet in Bionic's repositories.
            #sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
            sudo apt-get update
            sudo apt-get install -y bc
            if [ "${{ matrix.runversion }}" = "DOCKER" ]; then
              echo YES DOCKER ONLY ${{ matrix.runversion }} , DOITPROG is ${{ matrix.DOITPROG }}
              echo "::set-env name=CC::gcc-${{ matrix.version }}"
              echo "::set-env name=CXX::g++-${{ matrix.version }}"
            else
              echo NO DOCKER ONLY ${{ matrix.runversion }} , DOITPROG is ${{ matrix.DOITPROG }}
              echo "::set-env name=CC::clang-${{ matrix.version }}"
              echo "::set-env name=CXX::clang++-${{ matrix.version }}"
            fi
        
        # YAML folded multiline strings ('>') require the same indentation for all
        # lines in order to turn newlines into spaces.
        
        - name: Foo Configure Sanitizers (Linux && macOS)
          if: runner.os == 'Linux' || runner.os == 'macOS'
          run: touch foo-cmake-build-DREPROC_SANITIZERS=ON

        - name: Build
          run: |
            export ONLY_${{ matrix.runversion }}=1
            export DOITPROG=${{ matrix.DOITPROG }}
            ./buildbench ./examples/ex01 out.csv 5

        # Aside from running the tests we also make sure the examples don't
        # crash or return a non-zero exit code.

        - name: Test
          shell: bash
          run: |
            ls -latr build/test
            ls -latr build/reproc/examples/drain > /dev/null
            ls -latr build/reproc/examples/git-status > /dev/null
            ls -latr build/reproc/examples/inherit cmake --help > /dev/null
            ls -latr build/reproc++/examples/background cmake --help > /dev/null
            ls -latr build/reproc++/examples/cmake-help > /dev/null
            ls -latr build/reproc++/examples/forward cmake --help > /dev/null
      else
        - name: SKIPPED
          run: echo SKIPPED
      fi
